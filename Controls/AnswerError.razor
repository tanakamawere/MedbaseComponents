<MudPaper Class="pa-6" Elevation="3">
    <MudStack Spacing="4" Class="full-width">
        <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" Size="Size.Large" />
        <MudText Typo="Typo.subtitle2">
            @Error.Answer
        </MudText>
        <MudText Typo="Typo.body1">
            @Error.Error
        </MudText>
        <div>
            <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Info"
                       EndIcon="@Icons.Material.Filled.Replay" title="Retry"
                       OnClick="@OnRetryClickedAsync">
                Retry
            </MudButton>
        </div>
    </MudStack>
</MudPaper>

@code{

    [Parameter, EditorRequired] public required string Question { get; set; }
    [Parameter, EditorRequired] public required ApproachResponse Error { get; set; }
    [Parameter, EditorRequired] public required EventCallback<string> OnRetryClicked { get; set; }

    private async Task OnRetryClickedAsync()
    {
        if (OnRetryClicked.HasDelegate)
        {
            await OnRetryClicked.InvokeAsync(Question);
        }
    }

    public record SupportingContentRecord(string Title, string Content);

    public record SupportingImageRecord(string Title, string Url);

    public record ApproachResponse(
    string Answer,
    string? Thoughts,
    SupportingContentRecord[]? DataPoints, // title, content
    SupportingImageRecord[]? Images, // title, url
    string CitationBaseUrl,
    string? Error = null);
}