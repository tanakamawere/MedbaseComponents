@* @using Azure.AI.OpenAI *@
@using MedbaseComponents.Pages
@using MedbaseLibrary.Helpers
@using Azure
@using System.Net.Http.Json 
@inject IApiRepository apiRepository
@using MedbaseLibrary.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider authState
@inject AiClient aiClient
@inherits BasePage
@using Markdig
@using System.Text
@using static MedbaseLibrary.Helpers.Helpers

<AuthorizeView>
    <Authorized>
        <MudDialog Style="max-width:800px;" Class="m-2">
            <DialogContent>
                <!--Get Medbase Premium banner-->
                <MudText Typo="Typo.body1" Class="@(limitIsReached ? "d-block" : "d-none")">
                    Get Medbase Premium, pretty please
                </MudText>

                <!--Content if user can still use AI-->
                <div class="@(limitIsReached ? "d-none" : "d-block")">
                    <div class="text-center">
                        <MudTextField T="string"
                        @ref="textField"
                        Disabled="@isLoading"
                        @bind-Text="question"
                        Variant="Variant.Outlined"
                        Label="Edit your question"
                        Lines="5" />
                        <MudProgressLinear Color="Color.Primary"
                        Rounded="true"
                        Class="my-3"
                        Size="Size.Small"
                        Value="(usageCount / Helpers.MaxFreeAIUsage) * 100" />
                    </div>
                    <MudPaper Class="shadow border">
                        <div class="m-2 p-5">
                            @if (isLoading)
                            {
                                <SkeletonLoadingComponent />
                            }
                            else
                            {
                                @if (string.IsNullOrWhiteSpace(aiAnswerStringBuilder.ToString()))
                                {
                                    <MudText>Your answer will appear here</MudText>
                                }
                                else
                                {
                                    <MudMarkdown Value="@aiAnswerStringBuilder.ToString()" />
                                    <div>
                                        <MudIcon Icon="@Icons.Material.Filled.AutoAwesome" />
                                        Medbase AI
                                    </div>
                                    <MudSpacer />
                                    <MudSpacer />
                                    <MudText Typo="Typo.body2">AI generated answers aren't always correct.</MudText>
                                }
                            }
                        </div>
                    </MudPaper>
                    <MudText>
                        @usageIndicator
                    </MudText>
                </div>
            </DialogContent>
            <DialogActions>
                <MudButton Color="Color.Primary" OnClick="Close">Close</MudButton>
                <MudButton Color="Color.Primary"
                Disabled="@isLoading"
                           OnClick="SendPromptAsync">Ask</MudButton>
            </DialogActions>
        </MudDialog>
    </Authorized>
    <NotAuthorized>
        <LoginBanner/>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public string questionTextFromPage { get; set; } = "";
    private string question = "";
    private bool isLoading = false;
    private StringBuilder aiAnswerStringBuilder = new();
    private bool isSubscribed = false;
    private bool limitIsReached = false;
    private int usageCount = 0;
    private SubscriptionStatus subscriptionStatus;
    private MudTextField<string> textField;
    private AuthenticationState authenticationState;
    private string usageIndicator = "";

    protected override async Task OnInitializedAsync()
    {

        WithAnswerToggle();
    }

    async void SendPromptAsync()
    {
        isLoading = true;
        try
        {

            var response = await aiClient.GetGeminiCompletionAsync($"{Helpers.SystemPrompt} - {question}");

            if (response.IsSuccess)
            {
                aiAnswerStringBuilder.Append(response.Data.ToString());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void WithAnswerToggle()
    {
        question = "";
        question = questionTextFromPage;
        StateHasChanged();
    }

    void Close() => MudDialog.Close();
}
