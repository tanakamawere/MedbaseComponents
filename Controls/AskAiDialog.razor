@using Azure.AI.OpenAI
@using MedbaseComponents.Pages
@using MedbaseLibrary.Helpers
@using Azure
@using System.Net.Http.Json 
@inject IApiRepository apiRepository
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider authState
@inherits BasePage
@using Markdig
@using System.Text
@using static MedbaseLibrary.Helpers.Helpers

<MudDialog Style="max-width:800px;" Class="m-2">
    <DialogContent>
        <!--Get Medbase Premium banner-->
        <MudText Typo="Typo.body1" Class="@(limitIsReached ? "d-block" : "d-none")">
            Get Medbase Premium, pretty please
        </MudText>

        <!--Content if user can still use AI-->
        <div class="@(limitIsReached ? "d-none" : "d-block")">
            <div class="text-center">
                <MudTextField T="string"
                              @ref="textField"
                              Disabled="@isLoading"
                              @bind-Text="question"
                              Variant="Variant.Outlined"
                              Label="Edit your question"
                              Lines="5" />
                <MudProgressLinear Color="Color.Primary"
                                   Rounded="true"
                                   Class="my-3"
                                   Size="Size.Small"
                                   Value="(usageCount / Helpers.MaxFreeAIUsage) * 100" />
            </div>
            <MudPaper Class="shadow border">
                <div class="m-2 p-5">
                    @if (isLoading)
                    {
                        <SkeletonLoadingComponent />
                    }
                    else
                    {
                        @if (string.IsNullOrWhiteSpace(aiAnswer))
                        {
                            <MudText>Your answer will appear here</MudText>
                        }
                        else
                        {
                            <MudMarkdown Value="@aiAnswer" />
                            <div>
                                <MudIcon Icon="@Icons.Material.Filled.AutoAwesome" />
                                Medbase AI
                            </div>
                            <MudSpacer />
                            <MudSpacer />
                            <MudText Typo="Typo.body2">AI generated answers aren't always correct.</MudText>
                        }
                    }
                </div>
            </MudPaper>
            <MudText>
                @usageIndicator
            </MudText>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Close">Close</MudButton>
        <MudButton Color="Color.Primary"
                   Disabled="@isLoading"
                   OnClick="ValidateAIUsage">Ask</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public string questionMain { get; set; } = "";
    [Parameter]
    public string child { get; set; } = "";
    [Parameter]
    public bool answer { get; set; }
    public string aiAnswer { get; set; } = "";
    private string question = "";
    private bool isLoading = false;
    private bool isSubscribed = false;
    private bool limitIsReached = false;
    private int usageCount = 0;
    private SubscriptionStatus subscriptionStatus;
    private MudTextField<string> textField;
    private AuthenticationState authenticationState;
    private OpenAIClient client;
    private string usageIndicator = "";
    private List<ChatRequestMessage> chatRequestMessages;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await authState.GetAuthenticationStateAsync();
        client = new OpenAIClient(Environment.GetEnvironmentVariable("OPENAI_API_KEY"));

        WithAnswerToggle();
    }

    private async Task ValidateAIUsage()
    {
        if (string.IsNullOrWhiteSpace(question))
        {
            textField.Error = true;
            textField.ErrorText = "Please enter a message";
        }
        else if (!checkForInternet.InternetAvailable())
        {
            textField.Error = true;
            textField.ErrorText = "Please connect to the internet to use Medbase AI";
        }
        else
        {
            isLoading = true;
            isSubscribed = bool.Parse(authenticationState.User.Claims.FirstOrDefault(c => c.Type == CustomClaimTypes.SubscriptionActive).Value);

            subscriptionStatus = await Helpers.CheckForSubscriptionStatus(apiRepository, isSubscribed, authenticationState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);

            if (subscriptionStatus.Equals(SubscriptionStatus.LimitReached))
            {
                //Limit has been reached
                subscriptionStatus = SubscriptionStatus.LimitReached;
                limitIsReached = true;
                isLoading = false;
                StateHasChanged();
            }
            else if (subscriptionStatus.Equals(SubscriptionStatus.PremiumUser))
            {
                subscriptionStatus = SubscriptionStatus.PremiumUser;
                SendOpenAI();
            }
            else
            {
                subscriptionStatus = SubscriptionStatus.FreeUser;
                SendOpenAI();
            }
        }
    }

    async void SendOpenAI()
    {
        try
        {
            var chatCompletionsOptions = new ChatCompletionsOptions()
            {
                DeploymentName = "gpt-3.5-turbo-0125",
                Messages =
                {
                    new ChatRequestSystemMessage(Helpers.SystemPrompt),
                    new ChatRequestUserMessage(question)
                },
                MaxTokens = 150,
            };

            // This is the non-streaming version of the API
            Response<ChatCompletions> response = await client.GetChatCompletionsAsync(chatCompletionsOptions);
            //Get first answer from the choices
            aiAnswer = response.Value.Choices[0].Message.Content;

            // This is the streaming version of the API
            // await foreach (StreamingChatCompletionsUpdate item in client.GetChatCompletionsStreaming(chatCompletionsOptions))
            // {
            //     if (!string.IsNullOrEmpty(item.ContentUpdate))
            //     {
            //         isLoading = false;
            //         var aiAnswerStringBuilder = new StringBuilder();
            //         aiAnswerStringBuilder.Append(item.ContentUpdate);
            //         aiAnswer = aiAnswerStringBuilder.ToString();
            //     }
            // }

            await UpdateAICredits();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // async void Send()
    // {
    //     try
    //     {
    //         isLoading = true;
    //         var response = await aiService.CompletionPost(question, false);
    //         if (response.IsSuccessStatusCode)
    //         {

    //             // Read the response content as a string
    //             Completion? completion = await response.Content.ReadFromJsonAsync<Completion>();

    //             Message choice = completion.Choices[0].Message;
    //             Console.WriteLine(choice.content);
    //             // Now you can work with the response content (e.g., parse JSON, extract data)
    //             aiAnswer = choice.content;
    //         }
    //         else
    //         {
    //             aiAnswer = "Something went wrong... Check your internet connection";
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine(ex);
    //     }
    //     finally
    //     {
    //         isLoading = false;
    //         await UpdateAICredits();
    //         StateHasChanged();
    //     }
    // }

    private async Task UpdateAICredits()
    {
        //Check if subscription status is premium
        switch (subscriptionStatus)
        {
            case SubscriptionStatus.PremiumUser:
                usageIndicator = subscriptionStatus.ToString();
                break;
            case SubscriptionStatus.LimitReached:
                usageIndicator = subscriptionStatus.ToString();
                break;
            case SubscriptionStatus.FreeUser:
                usageCount = await apiRepository.GetUserUsageCount(authenticationState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);
                usageIndicator = $"{usageCount} / {Helpers.MaxFreeAIUsage} free daily AI credits left";
                break;
            default:
                usageIndicator = "";
                break;
        }
    }

    private void WithAnswerToggle()
    {
        question = "";
        question = $"Why is it {answer.ToString().ToLower()} that {questionMain.ToLower()}, {child.ToLower()}";
        StateHasChanged();
    }

    private void WithoutAnswerToggle()
    {
        question = "";
        question = $"True or false: {questionMain.ToLower()}, {child.ToLower()}";
        StateHasChanged();
    }

    void Close() => MudDialog.Close();
}
