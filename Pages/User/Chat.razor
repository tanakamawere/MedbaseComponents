@page "/chat"

@using Azure
@using Azure.AI.OpenAI.Assistants
@using MedbaseComponents.Controls
@using MedbaseLibrary.Helpers

@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using static MedbaseLibrary.Helpers.Helpers
@inject AuthenticationStateProvider authState
@inject ISnackbar Snackbar
@inject IApiRepository apiRepository
@inject NavigationManager NavigationManager

<!-- This page is intended for conversational Q&A. -->

<PageTitle>@title</PageTitle>
<HeadContent>
    <title>@title</title>
    <meta name="title" content="@title" />
    <meta name="description" content="@description" />

    <!-- Open Graph / Facebook -->
    <meta name="og:type" content="website" />
    <meta name="og:url" content="@NavigationManager.BaseUri" />
    <meta name="og:title" content="@title" />
    <meta name="og:description" content="@description" />
    <meta name="og:image" content="@image" />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content="@NavigationManager.BaseUri" />
    <meta name="twitter:title" content="@title" />
    <meta name="twitter:description" content="@description" />
    <meta name="twitter:image" content="@image" />
</HeadContent>


<div class="container-fluid h-100 @(limitIsReached ? "d-none" : "d-block")">
    <div class="overflow-auto chat-window">
        <MudGrid Justify="Justify.Center">
            @if (AiChats.Count == 0 && _isReceivingResponse == false)
            {
                <div class="d-flex align-content-center justify-content-center flex-wrap flex-grow-1 full-height">
                    <ChatExamples Message="Medbase AI" OnExampleClicked="@SendOpenAiMessage" />
                </div>
            }
            else if (_isReceivingResponse == true)
            {
                <div class="d-flex flex-column overflow-auto w-100 p-3">
                    @foreach (var item in AiChats)
                    {
                        foreach (var content in item.MessageContents)
                        {
                            if (content is MessageTextContent textContent)
                            {
                                <ChatMessage Message="@textContent.Text" WhoSent="@item.Role.ToString()" />
                            }
                        }
                    }
                    <SkeletonLoadingComponent />
                </div>
            }
            else if (AiChats.Count >= 1 && _isReceivingResponse == false)
            {
                <div class="d-flex flex-column overflow-auto w-100 p-3">
                    @foreach (var item in AiChats)
                    {
                        foreach (var content in item.MessageContents)
                        {
                            if (content is MessageTextContent textContent)
                            {
                                <ChatMessage Message="@textContent.Text" WhoSent="@item.Role.ToString()" />
                            }
                        }
                    }

                    @* @foreach (var (role, contentItems) in messagesDict)
                {
                foreach (var content in contentItems)
                {
                if (content is MessageTextContent textContent)
                {
                <ChatMessage Message="@textContent.Text" WhoSent="@role.ToString()" />
                }
                }
                } *@
                </div>
            }
        </MudGrid>
    </div>
    <div class="d-flex flex-column justify-content-center align-items-center mb-3">
        <div class="d-flex">
            <MudText>
                @usageIndicator
            </MudText>
            <MudTooltip Arrow="true" Text="Clear chat history" Placement="Placement.Top">
                <MudIconButton Color="Color.Primary" Size="Size.Small"
                               Icon=@Icons.Material.Filled.Refresh
                               OnClick="@OnClearChat" Disabled=@(_isReceivingResponse || AiChats.Count == 0) />
            </MudTooltip>
        </div>
        <MudTextField @bind-Value="@input" Label="Text"
                      Variant="Variant.Outlined"
                      AdornmentColor="Color.Secondary" AutoFocus="true"
                      Placeholder="Ask Medbase AI..." Lines="3"
                      IconSize="Size.Large"
                      Class="w-100 mx-lg-5"
                      AdornmentIcon="@Icons.Material.Filled.Send"
                      Adornment="Adornment.End"
                      @ref="@textField"
                      OnAdornmentClick="@SendOpenAiMessage"
                      Disabled=@_isReceivingResponse
                      HelperText="Use Shift + Enter for new lines" Immediate="true"
                      OnKeyUp="@OnKeyUpAsync" Clearable="true"
                      Counter="1_000" MaxLength="1_000" />

    </div>
</div>
<div>
    <!--Get Medbase Premium banner-->
    <MudText Typo="Typo.body1" Class="@(limitIsReached ? "d-block" : "d-none")">
        Get Medbase Premium, pretty please
    </MudText>
</div>

@code {
    //SEO Stuff
    private string description = "Medbase AI is trained on textbooks, lecture slides and MCQs from medical school. Give it a try.";
    private string title = "AI | Medbase";
    private string image = "https://i.postimg.cc/DyLX9tSM/medbase-ai.png";

    private string input;
    private MudTextField<string> textField;
    private string usageIndicator = "";
    private string userId = "";
    private ElementReference scrollContainer;
    private bool _isReceivingResponse = false;
    private Snackbar snackbar;
    private AuthenticationState authenticationState;
    private bool isSubscribed;
    private SubscriptionStatus subscriptionStatus;
    private bool limitIsReached = false;
    private string threadIdCache = "";
    private string assistantId = "asst_nieOwRIDpnN3IGAyO0epHXN2";


    //AI things
    private Response<Assistant> assistant;
    private AssistantsClient client;
    private Response<AssistantThread> thread; 
    private Response<PageableList<ThreadMessage>> messagesOpenAi;
    private List<AiChat> AiChats = [];

    protected override async Task OnInitializedAsync()
    {
        client = new AssistantsClient(MedbaseComponents.Shared.Helpers.OpenApiKey);
        assistant = await client.GetAssistantAsync(assistantId);
        thread = await client.CreateThreadAsync();
    }

    private async Task OnKeyUpAsync(KeyboardEventArgs args)
    {
        if (args is { Key: "Enter", ShiftKey: false })
        {
            await SendOpenAiMessage();
        }
    }

    private async Task UpdateAICredits()
    {
        //Check if subscription status is premium
        switch (subscriptionStatus)
        {
            case SubscriptionStatus.PremiumUser:
                usageIndicator = subscriptionStatus.ToString();
                break;
            case SubscriptionStatus.LimitReached:
                usageIndicator = subscriptionStatus.ToString();
                break;
            case SubscriptionStatus.FreeUser:
                usageIndicator = $"{await apiRepository.GetUserUsageCount(authenticationState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value)} / {Helpers.MaxFreeAIUsage} free daily AI credits left";
                break;
            default:
                usageIndicator = "";
                break;
        }
    }

    private async Task CheckForSubscriptionUsageStatus()
    {
        if (!string.IsNullOrWhiteSpace(input))
        {
            _isReceivingResponse = true;

            isSubscribed = bool.Parse(authenticationState.User.Claims.FirstOrDefault(c => c.Type == CustomClaimTypes.SubscriptionActive).Value);

            subscriptionStatus = await Helpers.CheckForSubscriptionStatus(apiRepository, isSubscribed, authenticationState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);

            if (subscriptionStatus.Equals(SubscriptionStatus.LimitReached))
            {
                //Limit has been reached
                subscriptionStatus = SubscriptionStatus.LimitReached;
                limitIsReached = true;
                StateHasChanged();
            }
            else if (subscriptionStatus.Equals(SubscriptionStatus.PremiumUser))
            {
                subscriptionStatus = SubscriptionStatus.PremiumUser;
                //await SendMessage();
                await SendOpenAiMessage();
            }
            else
            {
                subscriptionStatus = SubscriptionStatus.FreeUser;
                //await SendMessage();
                await SendOpenAiMessage();
            }
        }
        else
        {
            textField.Error = true;
            textField.ErrorText = "Please enter a message";
        }
    }

    private async Task SendOpenAiMessage()
    {
        _isReceivingResponse = true;
        string? lastMessageId = null;

        await client.CreateMessageAsync(thread.Value.Id, MessageRole.User, input);
        threadIdCache = thread.Value.Id;
        var run = await client.CreateRunAsync(thread.Value.Id, new CreateRunOptions(assistant.Value.Id));
        Response<ThreadRun> runResponse;

        try
        {
            do
            {
                runResponse = await client.GetRunAsync(thread.Value.Id, run.Value.Id);
            } while (runResponse.Value.Status == RunStatus.Queued || runResponse.Value.Status == RunStatus.InProgress);


            Console.WriteLine(runResponse.Value.LastError);
            textField.Clear();

            messagesOpenAi = await client.GetMessagesAsync(thread.Value.Id, order: ListSortOrder.Ascending, after: lastMessageId);

            //So that messages aren't duplicated, clear the list
            AiChats.Clear();
            foreach (var message in messagesOpenAi.Value.Data)
            {
                AiChats.Add(new AiChat
                {
                    Role = message.Role,
                    MessageContents = message.ContentItems
                });
                Console.WriteLine(message.ContentItems);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error is here?: {ex}");
            //Notify user that somethng went wrong
            snackbar = Snackbar.Add("Something went totally wrong. Please contact us or please try later.", Severity.Info);
        }
        finally
        {
            _isReceivingResponse = false;
            StateHasChanged();
        }
    }

    private async void OnClearChat()
    {
        AiChats.Clear();
        await client.DeleteThreadAsync(threadIdCache);
        textField.Clear();
        StateHasChanged();
    }
}