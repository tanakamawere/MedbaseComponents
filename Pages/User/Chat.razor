@page "/chat"

@inject IChatEndpoints aiService
@inject IApiRepository apiRepository
@using MedbaseComponents.Controls
@using MedbaseLibrary.Helpers
@using MedbaseLibrary.Models.AIModels
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject ISnackbar Snackbar
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using static MedbaseLibrary.Helpers.Helpers
@inject AuthenticationStateProvider authState

<!-- This page is intended for conversational Q&A. -->

<PageTitle>Chat | Medbase</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="container-fluid h-100 @(limitIsReached ? "d-none" : "d-block")">
            <div class="overflow-auto chat-window">
                <MudGrid Justify="Justify.Center">
                    @if (messages.Count() <= 1 && _isReceivingResponse == false)
                    {
                        <div class="d-flex align-content-center justify-content-center flex-wrap flex-grow-1 full-height">
                            <ChatExamples Message="Medbase AI" OnExampleClicked="@SendMessage" />
                            <MudSwitch T="bool"
                                       Class="align-self-center"
                                       CheckedChanged="OnUseContextToggled"
                                       @bind-Value="@usingContext"
                                       Label="@switchLabel"
                                       Color="@Color.Primary"
                                       UnCheckedColor="Color.Secondary" />
                        </div>
                    }
                    else if (_isReceivingResponse == true)
                    {
                        <div class="d-flex flex-column overflow-auto w-100 p-3">
                            @foreach (var message in messages.Skip(1))
                            {
                                <ChatMessage Message="@message.content" WhoSent="@message.role" />
                            }
                            <SkeletonLoadingComponent />
                        </div>
                    }
                    else if (messages.Count() > 1 && _isReceivingResponse == false)
                    {
                        <div class="d-flex flex-column overflow-auto w-100 p-3">
                            @foreach (var message in messages.Skip(1))
                            {
                                <ChatMessage Message="@message.content" WhoSent="@message.role" />
                            }
                        </div>
                    }
                </MudGrid>
            </div>
            <div class="d-flex flex-column justify-content-center align-items-center mb-3">
                <div class="d-flex">
                    <MudText>
                        @usageIndicator
                    </MudText>
                    <MudTooltip Arrow="true" Text="Clear chat history" Placement="Placement.Top">
                        <MudIconButton Color="Color.Primary" Size="Size.Small"
                                       Icon=@Icons.Material.Filled.Refresh
                                       OnClick="@OnClearChat" Disabled=@(_isReceivingResponse || messages is { Count: 1 }) />
                    </MudTooltip>
                </div>
                <MudTextField @bind-Value="@input" Label="Text"
                              Variant="Variant.Outlined"
                              AdornmentColor="Color.Secondary" AutoFocus="true"
                              Placeholder="Ask Medbase AI..." Lines="3"
                              IconSize="Size.Large"
                              Class="w-100 mx-lg-5"
                              AdornmentIcon="@Icons.Material.Filled.Send"
                              Adornment="Adornment.End"
                              @ref="@textField"
                              OnAdornmentClick="@CheckForSubscriptionUsageStatus"
                              Disabled=@_isReceivingResponse
                              HelperText="Use Shift + Enter for new lines" Immediate="true"
                              OnKeyUp="@OnKeyUpAsync" Clearable="true"
                              Counter="1_000" MaxLength="1_000" />

            </div>
        </div>
        <div>
            <!--Get Medbase Premium banner-->
            <MudText Typo="Typo.body1" Class="@(limitIsReached ? "d-block" : "d-none")">
                Get Medbase Premium, pretty please
            </MudText>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="d-flex justify-content-center align-items-center h-100">
            <SignInInfoPage />
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    private string input;
    private bool usingContext = false;
    private string switchLabel = "Normal chat with Medbase AI";
    private List<Message> messages = [];
    private MudTextField<string> textField;
    private string usageIndicator = "";
    private string userId = "";
    private ElementReference scrollContainer;
    private bool _isReceivingResponse = false;
    private Snackbar snackbar;
    private AuthenticationState authenticationState;
    private bool isSubscribed;
    private SubscriptionStatus subscriptionStatus;
    private bool limitIsReached = false;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await authState.GetAuthenticationStateAsync();
        messages.Add(new Message { role = "user", content = Helpers.SystemPrompt });
    }

    private async Task OnKeyUpAsync(KeyboardEventArgs args)
    {
        if (args is { Key: "Enter", ShiftKey: false })
        {
            await CheckForSubscriptionUsageStatus();
        }
    }

    private async Task UpdateAICredits()
    {
        //Check if subscription status is premium
        switch (subscriptionStatus)
        {
            case SubscriptionStatus.PremiumUser:
                usageIndicator = subscriptionStatus.ToString();
                break;
            case SubscriptionStatus.LimitReached:
                usageIndicator = subscriptionStatus.ToString();
                break;
            case SubscriptionStatus.FreeUser:
                usageIndicator = $"{await apiRepository.GetUserUsageCount(authenticationState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value)} / {Helpers.MaxFreeAIUsage} free daily AI credits left";
                break;
            default:
                usageIndicator = "";
                break;
        }
    }

    private async Task CheckForSubscriptionUsageStatus()
    {
        if (!string.IsNullOrWhiteSpace(input))
        {
            _isReceivingResponse = true;

            isSubscribed = bool.Parse(authenticationState.User.Claims.FirstOrDefault(c => c.Type == CustomClaimTypes.SubscriptionActive).Value);

            subscriptionStatus = await Helpers.CheckForSubscriptionStatus(apiRepository, isSubscribed, authenticationState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier).Value);

            if (subscriptionStatus.Equals(SubscriptionStatus.LimitReached))
            {
                //Limit has been reached
                subscriptionStatus = SubscriptionStatus.LimitReached;
                limitIsReached = true;
                StateHasChanged();
            }
            else if (subscriptionStatus.Equals(SubscriptionStatus.PremiumUser))
            {
                subscriptionStatus = SubscriptionStatus.PremiumUser;
                await SendMessage();
            }
            else
            {
                subscriptionStatus = SubscriptionStatus.FreeUser;
                await SendMessage();
            }
        }
        else
        {
            textField.Error = true;
            textField.ErrorText = "Please enter a message";
        }
    }

    private async Task SendMessage()
    {
        try
        {
            messages.Add(new Message { role = "user", content = input });

            textField.Clear();
            HttpResponseMessage? response = new();

            Console.WriteLine(JsonSerializer.Serialize(messages));

            if (usingContext)
                response = await aiService.ChatCompletionPost(messages, true);
            else
                response = await aiService.ChatCompletionPost(messages, false);

            if (response.IsSuccessStatusCode)
            {
                if (usingContext == true)
                {
                    List<string> listOfSources = new();
                    // Read the response content as a string
                    Completion? completion = await response.Content.ReadFromJsonAsync<Completion>();

                    Message choice = completion.Choices[0].Message;
                    Source[] sources = completion.Choices[0].Sources;

                    //foreach (Source item in sources)
                    //{
                    //    DocumentMetadata docMetadata = item.Document?.DocMetadata;
                    //    listOfSources.Add($"{docMetadata.FileName} - {docMetadata.PageLabel}\n");
                    //}

                    // Now you can work with the response content (e.g., parse JSON, extract data)
                    Console.WriteLine($"Response content:\n{choice.content} \n\n{listOfSources.ToString()}");

                    //string finalReply = $"{choice.content} \n\n{listOfSources.ToString()}";

                    // Add assistant's message to the conversation history
                    messages.Add(new Message { role = "assistant", content = choice.content });
                }
                else
                {
                    // Read the response content as a string
                    Completion? completion = await response.Content.ReadFromJsonAsync<Completion>();

                    Message choice = completion.Choices[0].Message;

                    // Now you can work with the response content (e.g., parse JSON, extract data)
                    Console.WriteLine($"Response content:\n{choice.content}");

                    // Add assistant's message to the conversation history
                    messages.Add(new Message { role = "assistant", content = choice.content });
                }
            }
            else
            {
                Console.WriteLine($"Error: {response.StatusCode} - {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error is here?: {ex}");
            //Notify user that somethng went wrong
            snackbar = Snackbar.Add("Something went totally wrong. Please contact us or please try later.", Severity.Info);
        }
        finally
        {
            _isReceivingResponse = false;
            await UpdateAICredits();
            StateHasChanged();
        }
    }

    private void OnClearChat()
    {
        messages.Clear();
        textField.Clear();
        StateHasChanged();
    }

    private void OnUseContextToggled()
    {
        usingContext = !usingContext;
        switchLabel = usingContext ? "Chat using Medbase AI Context" : "Normal chat with Medbase AI";
    }
}