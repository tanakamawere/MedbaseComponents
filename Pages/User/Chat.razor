@page "/chat"

@inject IChatEndpoints aiService

@using MedbaseComponents.Controls
@using MedbaseLibrary.Models.AIModels
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject ISnackbar Snackbar

<!-- This page is intended for conversational Q&A. -->

<PageTitle>Chat | Medbase</PageTitle>

<div class="container-fluid h-100">
    <div class="overflow-auto chat-window">
        <MudGrid Justify="Justify.Center">
            @if (messages.Count() == 0 && _isReceivingResponse == false)
            {
                <div class="d-flex align-content-center justify-content-center flex-wrap flex-grow-1 full-height">
                    <ChatExamples Message="Medbase AI" OnExampleClicked="@SendMessage" />
                    <MudSwitch T="bool"
                        Class="align-self-center"
                        CheckedChanged="OnUseContextToggled"
                        @bind-Value="@usingContext"
                        Label="@switchLabel"
                        Color="@Color.Primary"
                        UnCheckedColor="Color.Secondary" />
                </div>
            }
            else if (_isReceivingResponse == true)
            {
                <div class="d-flex flex-column overflow-auto w-100 p-3">
                    @foreach (var message in messages)
                    {
                        <ChatMessage Message="@message.content" WhoSent="@message.role" />
                    }
                    <SkeletonLoadingComponent />
                </div>
            }
            else if (messages.Count() > 0 && _isReceivingResponse == false)
            {
                <div class="d-flex flex-column overflow-auto w-100 p-3">
                    @foreach (var message in messages)
                    {
                        <ChatMessage Message="@message.content" WhoSent="@message.role" />
                    }
                </div>
            }
        </MudGrid>
    </div>
    <div class="d-flex flex-column justify-content-center align-items-center mb-3">
        <MudTooltip Arrow="true" Text="Clear chat history" Placement="Placement.Top">
            <MudIconButton Color="Color.Primary" Size="Size.Small"
                           Icon=@Icons.Material.Filled.Refresh
                           OnClick="@OnClearChat" Disabled=@(_isReceivingResponse || messages is { Count: 0 }) />
        </MudTooltip>
        <MudTextField @bind-Value="@input" Label="Text"
                      Variant="Variant.Outlined"
                      AdornmentColor="Color.Secondary" AutoFocus="true"
                      Placeholder="Ask Medbase AI..." Lines="3"
                      IconSize="Size.Large"
                      AdornmentIcon="@Icons.Material.Filled.Send"
                      Adornment="Adornment.End"
                      @ref="@textField"
                      OnAdornmentClick="@SendMessage"
                      Disabled=@_isReceivingResponse
                      HelperText="Use Shift + Enter for new lines" Immediate="true"
                      OnKeyUp="@OnKeyUpAsync" Clearable="true"
                      Counter="1_000" MaxLength="1_000" />

    </div>
</div>


@code {
    private string input;
    private bool usingContext = false;
    private string switchLabel = "Normal chat with Medbase AI";
    private List<Message> messages = [];
    private MudTextField<string> textField;
    private ElementReference scrollContainer;
    private bool _isReceivingResponse = false;
    private Snackbar snackbar;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private async Task OnKeyUpAsync(KeyboardEventArgs args)
    {
        if (args is { Key: "Enter", ShiftKey: false })
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(input))
        {
            _isReceivingResponse = true;

            try
            {
                messages.Add(new Message { role = "user", content = input });

                textField.Clear();
                HttpResponseMessage? response = new();

                Console.WriteLine(JsonSerializer.Serialize(messages));

                if (usingContext)
                {
                    response = await aiService.ChatCompletionPost(messages, true);
                }
                else
                {
                    response = await aiService.ChatCompletionPost(messages, false);
                }

                if (response.IsSuccessStatusCode)
                {
                    if (usingContext == true)
                    {
                        List<string> listOfSources = new();
                        // Read the response content as a string
                        Completion? completion = await response.Content.ReadFromJsonAsync<Completion>();

                        Message choice = completion.Choices[0].Message;
                        Source[] sources = completion.Choices[0].Sources;

                        //foreach (Source item in sources)
                        //{
                        //    DocumentMetadata docMetadata = item.Document?.DocMetadata;
                        //    listOfSources.Add($"{docMetadata.FileName} - {docMetadata.PageLabel}\n");
                        //}

                        // Now you can work with the response content (e.g., parse JSON, extract data)
                        Console.WriteLine($"Response content:\n{choice.content} \n\n{listOfSources.ToString()}");

                        string finalReply = $"{choice.content} \n\n{listOfSources.ToString()}";

                        // Add assistant's message to the conversation history
                        messages.Add(new Message { role = "assistant", content = finalReply });
                    }
                    else
                    {
                        // Read the response content as a string
                        Completion? completion = await response.Content.ReadFromJsonAsync<Completion>();

                        Message choice = completion.Choices[0].Message;

                        // Now you can work with the response content (e.g., parse JSON, extract data)
                        Console.WriteLine($"Response content:\n{choice.content}");

                        // Add assistant's message to the conversation history
                        messages.Add(new Message { role = "assistant", content = choice.content });
                    }
                }
                else
                {
                    Console.WriteLine($"Error: {response.StatusCode} - {response.ReasonPhrase}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error is here?: {ex}");
                //Notify user that somethng went wrong
                snackbar = Snackbar.Add("Something went totally wrong. Please contact us or please try later.", Severity.Info);
            }
            finally
            {
                _isReceivingResponse = false;
                StateHasChanged();
            }
        }
        else
        {
            textField.Error = true;
            textField.ErrorText = "Please enter a message";
        }
    }

    private void OnClearChat()
    {
        messages.Clear();
        textField.Clear();
        StateHasChanged();
    }

    private void OnUseContextToggled()
    {
        usingContext = !usingContext;
        switchLabel = usingContext ? "Chat using Medbase AI Context" : "Normal chat with Medbase AI";
    }
}