@page "/notes/course/{courseRef}"
@using MedbaseLibrary.Models
@inject NavigationManager navManager
@inject IApiRepository repository
@inject INotesRepository notesRepository


<header>
    <div class="container my-5">
        <div class="row p-4 pb-0 pe-lg-0 pt-lg-5 align-items-center rounded-3 border shadow-lg">
            <div class="col-lg-7 p-3 p-lg-5 pt-lg-3">
                <MudText Typo="Typo.h1" class="display-5 fw-bolder mb-2">
                    @courseRef Notes📝
                </MudText>
            </div>
            <div class="col-lg-4 offset-lg-1 m-5">
                <img class="img-fluid bg-transparent" src="img/notes.png" style="max-height:300px">
            </div>
        </div>
    </div>
</header>

<MudContainer Class="mt-5">
    @if (isLoading)
    {
        <MedbaseComponents.Controls.LoadingComponent Message="Getting notes from the database..." />
    }
    else if (notesList.Count.Equals(0) && isLoading.Equals(false))
    {
        <MedbaseComponents.Controls.EmptyNotesComponent />
    }
    else
    {
        <div class="row gx-5">
            <Virtualize Items="notesList" Context="notes" TItem="Note">
                <ItemContent>
                    <div class="col-lg-4 mb-5">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h5">@notes.Title</MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardActions>
                                <MudButton Color="Color.Primary" OnClick="@(() => GoTo(notes.Id))">View</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </div>
                </ItemContent>
            </Virtualize>
        </div>
    }
</MudContainer>

@code {
    [Parameter]
    public string courseRef { get; set; } = "";
    private List<Note> notesList = new();

    private bool isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        notesList = await notesRepository.GetNotesByCourse(courseRef);
        isLoading = false;
    }

    private void GoTo(int id)
    {
        navManager.NavigateTo($"/note/{id}");
    }
}
