@page "/questions/{topicRef:int}"
@using MedbaseComponents.Models
@using MedbaseComponents.Services
@using MedbaseComponents.Controls
@inject IDialogService DialogService
@inject IApiRepository repository
@using Markdig
@inject NavigationManager navManager

<PageTitle>@title</PageTitle>
    <HeadContent>
        <title>@title</title>
    <meta name="title" content="@title" />
    <meta name="description" content="@description" />

    <!-- Open Graph / Facebook -->
    <meta name="og:type" content="website" />
    <meta name="og:url" content="@navManager.BaseUri" />
    <meta name="og:title" content="@title" />
    <meta name="og:description" content="@description" />
    <meta name="og:image" content="@image" />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content="@navManager.BaseUri" />
    <meta name="twitter:title" content="@title" />
    <meta name="twitter:description" content="@description" />
    <meta name="twitter:image" content="@image" />

    <!-- Custom MD Styles -->
</HeadContent>

<div class="container">

    <MudBreadcrumbs Items="_items"></MudBreadcrumbs>

    @if (isLoading.Equals(true))
    {
        <div style="display:@(searchResultsNull == true ? "none" : "block");">
            <LoadingComponent />
        </div>
    }
    else if(QuestionPagedWithTopic.QuestionsWithTopic.Questions.Count().Equals(0))
    {
        <EmptyResults SearchWord="@searchTerm" />
    }
    else if(isLoading.Equals(false) && QuestionPagedWithTopic.QuestionsWithTopic.Questions.Count().Equals(0))
    {
        <UnderConstruction/>
    }
    else
    {
        <div class="floating-toolbar d-flex justify-content-center fixed-bottom mb-5">
            <QuestionsToolbar @ref="questionsToolbar" CloseSearch="@CloseSearch" CurrentPage="@QuestionPagedWithTopic.CurrentPage" TotalPages="@QuestionPagedWithTopic.Pages" OnPageChange="@GetQuestions" OpenSearch="@OpenSearchDialog"/>
        </div>

        <div style="margin-bottom:75px;" class="m-2 position-fixed bottom-0 end-0 justify-content-center @(showToolbar.Equals(true) ? "d-none" : "d-block")">
            <MudFab Color="Color.Primary" 
                    StartIcon="@Icons.Material.Filled.More" 
                    OnClick="OpenToolbar"
                    Label="Show Toolbar"
                    Class="object-left" />
        </div>
        <div class="col-lg-6 col-md-8 mx-auto fw-normal" style="margin-bottom:150px;">
            <Virtualize Items="QuestionPagedWithTopic.QuestionsWithTopic.Questions.ToList()" Context="question" TItem="Question">
                <ItemContent>
                    <MudCard class="mb-2">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">
                                    @question.Id - @question.QuestionMain
                                </MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Feedback" OnClick="() => OpenDialog(question.Id)" Color="Color.Default" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <input hidden asp-for="@question.Id" />
                            <!--Child1-->
                            <div>
                                <MudText>a) @question.ChildA</MudText>
                                <div style="display:@(Answers == 1 && qts == question.Id ? "block" : "none")">
                                    <MudPaper Outlined="true" Class="p-1">
                                        <MudText>
                                            @question.AnswerA.ToString()
                                        </MudText>
                                        @((MarkupString)Markdown.ToHtml(question.ExplanationA == null ? " " : question.ExplanationA))
                                    </MudPaper>
                                </div>
                            </div>
                            <!--Child2-->
                            <div>
                                <MudText>b) @question.ChildB</MudText>
                                <div style="display:@(Answers == 1 && qts == question.Id ? "block" : "none")">
                                    <MudPaper Outlined="true" Class="p-1">
                                        <MudText>
                                            @question.AnswerB.ToString()
                                        </MudText>
                                        @((MarkupString)Markdown.ToHtml(question.ExplanationB == null ? " " : question.ExplanationB))
                                    </MudPaper>
                                </div>
                            </div>
                            <!--Child3-->
                            <div>
                                <MudText>c) @question.ChildC</MudText>
                                <div style="display:@(Answers == 1 && qts == question.Id ? "block" : "none")">
                                    <MudPaper Class="p-1" Outlined="true">
                                        <MudText>
                                            @question.AnswerC.ToString()
                                        </MudText>
                                        @((MarkupString)Markdown.ToHtml(question.ExplanationC == null ? " " : question.ExplanationC))
                                    </MudPaper>
                                </div>
                            </div>
                            <!--Child4-->
                            <div>
                                <MudText>d) @question.ChildD</MudText>
                                <div style="display:@(Answers == 1 && qts == question.Id ? "block" : "none")">
                                    <MudPaper Outlined="true" Class="p-1">
                                        <MudText>
                                            @question.AnswerD.ToString()
                                        </MudText>
                                        @((MarkupString)Markdown.ToHtml(question.ExplanationD == null ? " " : question.ExplanationD))
                                    </MudPaper>
                                </div>
                            </div>
                            <!--Child5-->
                            <div>
                                <MudText>e) @question.ChildE</MudText>

                                <div class="max-width-explanation-image" style="display:@(Answers == 1 && qts == question.Id ? "block" : "none")">
                                    <MudPaper Class="p-1" Outlined="true">
                                        <MudText>
                                            @question.AnswerE.ToString()
                                        </MudText>
                                        @((MarkupString)Markdown.ToHtml(question.ExplanationE == null ? " " : question.ExplanationE))
                                    </MudPaper>
                                </div>
                            </div>
                        </MudCardContent>
                        <MudCardActions class="justify-content-end">
                            <MudButton Variant="Variant.Text" OnClick="() => ShowAnswers(question.Id)" Color="Color.Primary">Answers</MudButton>
                        </MudCardActions>
                    </MudCard>
                </ItemContent>
            </Virtualize>
        </div>
    }
</div>



@code {
    [Parameter]
    public int topicRef { get; set; } = 0;
    public int Answers { get; set; } = 0;
    private int paginationPage = 1;
    public bool searchBarOpen = false;
    public bool searchResultsNull = false;
    private bool isLoading;
    private bool showToolbar = true;
    private string searchTerm = "";
    public int qts;
    private QuestionsToolbar questionsToolbar;
    //QuestionPaged QuestionPaged = new ();
    QuestionPagedWithTopic QuestionPagedWithTopic = new();
    private List<Question> QuestionsList { get; set; } = new();


    private string description = "Questions on your chosen topic";
    private string title = "Questions | Medbase";
    private string image = "https://i.postimg.cc/T1DjN4S5/Logo.png";

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "#", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Courses", href: "/courses", icon: Icons.Material.Filled.Book),
        new BreadcrumbItem("Topics", href: "/courses", icon: Icons.Material.Filled.LibraryBooks),
        new BreadcrumbItem("Questions", href: "/courses", icon: Icons.Material.Filled.QuestionAnswer),
    };
    protected override async Task OnParametersSetAsync()
    {
        await GetQuestions();
    }

    private void ShowAnswers(int questionToShow)
    {
        qts = questionToShow;
        if (Answers == 0)
            Answers = 1;
        else if (Answers == 1)
            Answers = 0;
    }

    private async Task GetQuestions(int page = 1)
    {
        isLoading = true;
        QuestionPagedWithTopic = await repository.GetPagedQuestionsWithTopic(topicRef, page, 10f);

        //QuestionPaged = await repository.GetPagedQuestions(topicRef, page, 10f);
        isLoading = false;
    }
    private void OpenSearchBar() => searchBarOpen = !searchBarOpen;
    private void OpenToolbar() => showToolbar = !showToolbar;
    private void OpenDialog(int questionId)
    {
        var parameters = new DialogParameters<CorrectionsDialog>();
        parameters.Add(x => x.questionId, questionId);
        var options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                Position = DialogPosition.Center,
            };
        DialogService.Show<CorrectionsDialog>("Submit Answer Correction", parameters, options);
    }

    private async Task OpenSearchDialog()
    {
        var parameters = new DialogParameters<SearchQuestionsDialog>();
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraExtraLarge,
            Position = DialogPosition.Center,
            FullWidth = true,
            CloseOnEscapeKey = true,
            NoHeader = true,
            FullScreen = false,
        };

        try
        {
            var dialog = await DialogService.ShowAsync<SearchQuestionsDialog>("Search Questions", parameters, options);
            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                searchTerm = result.Data.ToString();
                isLoading = true;
                QuestionPagedWithTopic.QuestionsWithTopic.Questions = await repository.GetQuestionsByKeyword(searchTerm);

                //adjust toolbar appearance
                questionsToolbar.Searched = true;
                questionsToolbar.SearchText = searchTerm;
                questionsToolbar.NumberOfSearchResults = QuestionPagedWithTopic.QuestionsWithTopic.Questions.Count().ToString();

                if (QuestionPagedWithTopic.QuestionsWithTopic.Questions.ToList().Count() == 0)
                {
                    searchResultsNull = true;
                }
                isLoading = false;
            }
        }
        catch (Exception)
        {
            // Do nothing
        }
    }

    private async Task CloseSearch()
    {
        navManager.NavigateTo(navManager.Uri, true);
    }
}
