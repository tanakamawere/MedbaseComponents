@page "/questions/{topicRef:int}"
@page "/questions/{topicRef:int}/{source}"
@using Medbase.Application.Services
@using MedbaseComponents.Shared
@using MedbaseLibrary.Models
@using MedbaseLibrary.Services
@using MedbaseComponents.Controls
@inject IDialogService DialogService
@inject QuestionClient questionClient
@inject IApiRepository repository
@inject UserService userService
@inject ISnackbar Snackbar
@inherits BasePage
@inject NavigationManager navManager
@using Markdig

<PageTitle>@title</PageTitle>
<HeadContent>
    <title>@title</title>
    <meta name="title" content="@title" />
    <meta name="description" content="@description" />

    <!-- Open Graph / Facebook -->
    <meta name="og:type" content="website" />
    <meta name="og:url" content="@navManager.BaseUri" />
    <meta name="og:title" content="@title" />
    <meta name="og:description" content="@description" />
    <meta name="og:image" content="@image" />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content="@navManager.BaseUri" />
    <meta name="twitter:title" content="@title" />
    <meta name="twitter:description" content="@description" />
    <meta name="twitter:image" content="@image" />

    <!-- Custom MD Styles -->
</HeadContent>

<div class="container">

    <MudBreadcrumbs Items="_items"></MudBreadcrumbs>

    @if (isLoading.Equals(true))
    {
        <div style="display:@(searchResultsNull == true ? "none" : "block");">
            <LoadingComponent />
        </div>
    }
    else if(QuestionPagedWithTopic.Questions.Count().Equals(0))
    {
        <EmptyResults SearchWord="@searchTerm" />
    }
    else if(isLoading.Equals(false) && QuestionPagedWithTopic.Questions.Count().Equals(0))
    {
        <UnderConstruction/>
    }
    else
    {
        <div class="floating-toolbar d-flex justify-content-center fixed-bottom mb-5">
            <QuestionsToolbar @ref="questionsToolbar" CloseSearch="@CloseSearch" CurrentPage="@QuestionPagedWithTopic.CurrentPage" TotalPages="@QuestionPagedWithTopic.Pages" OnPageChange="@GetQuestions" OpenSearch="@OpenSearchDialog"/>
        </div>

        <div style="margin-bottom:75px;" class="m-2 position-fixed bottom-0 end-0 justify-content-center @(showToolbar.Equals(true) ? "d-none" : "d-block")">
            <MudFab Color="Color.Primary" 
            StartIcon="@Icons.Material.Filled.More" 
            OnClick="OpenToolbar"
            Label="Show Toolbar"
            Class="object-left" />
        </div>
        <div class="col-lg-6 col-md-8 mx-auto fw-normal" style="margin-bottom:150px;">
            <Virtualize Items="QuestionPagedWithTopic.Questions.ToList()" Context="question" TItem="Question">
                <ItemContent>
                    <MudCard class="mb-2">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">
                                    @question.Id - @question.QuestionMain
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <input hidden asp-for="@question.Id" />
                            <!--Child1-->
                            <div>
                                <MudText>a) @question.ChildA</MudText>
                                <div style="display:@(Answers == 1 && qts == question.Id ? "block" : "none")">
                                    <QuestionAnswerTemplate QuestionMain="@question.QuestionMain" 
                                    Child="@question.ChildA" 
                                    Answer="@question.AnswerA" 
                                    Explanation="@question.ExplanationA"
                                    EditClicked="@(() => OpenQuestionFeedbackDialog(question.Id))"
                                    FeedbackClicked="@(() => OpenQuestionRatingDialog(question.Id))"
                                    AskMedbaseClicked="@(() => AskAIQuestion(question.QuestionMain, question.ChildA, question.AnswerA))" />
                                </div>
                            </div>
                            <!--Child2-->
                            <div>
                                <MudText>b) @question.ChildB</MudText>
                                <div style="display:@(Answers == 1 && qts == question.Id ? "block" : "none")">
                                    <QuestionAnswerTemplate QuestionMain="@question.QuestionMain" 
                                    Child="@question.ChildB" 
                                    Answer="@question.AnswerB" 
                                    Explanation="@question.ExplanationB"
                                    EditClicked="@(() => OpenQuestionFeedbackDialog(question.Id))"
                                    FeedbackClicked="@(() => OpenQuestionRatingDialog(question.Id))"
                                    AskMedbaseClicked="@(() => AskAIQuestion(question.QuestionMain, question.ChildB, question.AnswerB))" />
                                </div>
                            </div>
                            <!--Child3-->
                            <div>
                                <MudText>c) @question.ChildC</MudText>
                                <div style="display:@(Answers == 1 && qts == question.Id ? "block" : "none")">
                                    <QuestionAnswerTemplate QuestionMain="@question.QuestionMain" 
                                    Child="@question.ChildC" 
                                    Answer="@question.AnswerC" 
                                    Explanation="@question.ExplanationC"
                                    EditClicked="@(() => OpenQuestionFeedbackDialog(question.Id))"
                                    FeedbackClicked="@(() => OpenQuestionRatingDialog(question.Id))"
                                    AskMedbaseClicked="@(() => AskAIQuestion(question.QuestionMain, question.ChildC, question.AnswerC))" />
                                </div>
                            </div>
                            <!--Child4-->
                            <div>
                                <MudText>d) @question.ChildD</MudText>
                                <div style="display:@(Answers == 1 && qts == question.Id ? "block" : "none")">
                                    <QuestionAnswerTemplate QuestionMain="@question.QuestionMain" 
                                    Child="@question.ChildD" 
                                    Answer="@question.AnswerD" 
                                    Explanation="@question.ExplanationD"
                                    EditClicked="@(() => OpenQuestionFeedbackDialog(question.Id))"
                                    FeedbackClicked="@(() => OpenQuestionRatingDialog(question.Id))"
                                    AskMedbaseClicked="@(() => AskAIQuestion(question.QuestionMain, question.ChildD, question.AnswerD))" />
                                </div>
                            </div>
                            <!--Child5-->
                            <div>
                                <MudText>e) @question.ChildE</MudText>

                                <div class="max-width-explanation-image" style="display:@(Answers == 1 && qts == question.Id ? "block" : "none")">
                                    <QuestionAnswerTemplate QuestionMain="@question.QuestionMain" 
                                    Child="@question.ChildE" 
                                    Answer="@question.AnswerE" 
                                    Explanation="@question.ExplanationE"
                                    EditClicked="@(() => OpenQuestionFeedbackDialog(question.Id))"
                                    FeedbackClicked="@(() => OpenQuestionRatingDialog(question.Id))"
                                    AskMedbaseClicked="@(() => AskAIQuestion(question.QuestionMain, question.ChildE, question.AnswerE))" />
                                </div>
                            </div>
                        </MudCardContent>
                        <MudCardActions class="justify-content-end">
                            <MudButton Variant="Variant.Text" OnClick="() => ShowAnswers(question.Id)" Color="Color.Primary">Answers</MudButton>
                        </MudCardActions>
                    </MudCard>
                </ItemContent>
            </Virtualize>
        </div>
    }
</div>



@code {
    [Parameter]
    public int topicRef { get; set; } = 0;
    [Parameter]
    public string source { get; set; } = "";
    public int Answers { get; set; } = 0;
    private int paginationPage = 1;
    public bool searchBarOpen = false;
    public bool searchResultsNull = false;
    private bool isLoading;
    private bool showToolbar = true;
    private string searchTerm = "";
    public int qts;
    private QuestionsToolbar questionsToolbar;
    //QuestionPaged QuestionPaged = new ();
    QuestionPaged QuestionPagedWithTopic = new();
    private List<Question> QuestionsList { get; set; } = new();
    private string UserId = "";


    private string description = "Questions on your chosen topic";
    private string title = "Questions | Medbase";
    private string image = "https://i.postimg.cc/T1DjN4S5/Logo.png";

    #if !WINDOWS
    [Inject]
    public IDatabaseRepository databaseRepository { get; set; }
    #endif

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "#", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Courses", href: "/courses", icon: Icons.Material.Filled.Book),
        new BreadcrumbItem("Topics", href: "/courses", icon: Icons.Material.Filled.LibraryBooks),
        new BreadcrumbItem("Questions", href: "/courses", icon: Icons.Material.Filled.QuestionAnswer),
    };

    protected override async Task OnInitializedAsync()
    {
        UserId = await userService.GetUserIdAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetQuestions();
    }

    private void ShowAnswers(int questionToShow)
    {
        qts = questionToShow;
        if (Answers == 0)
            Answers = 1;
        else if (Answers == 1)
            Answers = 0;
    }

    private async Task GetQuestions(int page = 1)
    {
        isLoading = true;

        if (!CheckIfIsMaui())
        {
            var response = await questionClient.GetQuestionsPagedAsync(topicRef, 10f, page);
            if (response.IsSuccess)
            {
                QuestionPagedWithTopic = response.Data;
            }
        }
        else
        {
            if(string.IsNullOrEmpty(source))
            {
                var response = await questionClient.GetQuestionsPagedAsync(topicRef, 10f, page);
                if (response.IsSuccess)
                {
                    QuestionPagedWithTopic = response.Data;
                }
            }
#if !WINDOWS
            else if (source.Equals("offline"))
            {
                QuestionPagedWithTopic = await databaseRepository.GetPagedQuestionsWithTopic(topicRef, page, 10f);
            }
#endif
        }
        isLoading = false;
    }
    private void OpenSearchBar() => searchBarOpen = !searchBarOpen;
    private void OpenToolbar() => showToolbar = !showToolbar;

    private async Task OpenSearchDialog()
    {
        var parameters = new DialogParameters<SearchQuestionsDialog>();
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraExtraLarge,
            Position = DialogPosition.Center,
            FullWidth = true,
            CloseOnEscapeKey = true,
            NoHeader = true,
            FullScreen = false,
        };

        try
        {
            var dialog = await DialogService.ShowAsync<SearchQuestionsDialog>("Search Questions", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                searchTerm = result.Data.ToString();
                isLoading = true;
                QuestionPagedWithTopic.Questions = await repository.GetQuestionsByKeyword(searchTerm);

                //adjust toolbar appearance
                questionsToolbar.Searched = true;
                questionsToolbar.SearchText = searchTerm;
                questionsToolbar.NumberOfSearchResults = QuestionPagedWithTopic.Questions.Count().ToString();

                if (QuestionPagedWithTopic.Questions.ToList().Count() == 0)
                {
                    searchResultsNull = true;
                }
                isLoading = false;
            }
        }
        catch (Exception)
        {
            // Do nothing
        }
    }

    private async Task AskAIQuestion(string questionMain, string child, bool answer)
    {
        var parameters = new DialogParameters<AskAiDialog>();
        parameters.Add(x => x.questionTextFromPage, $"Why is it { answer.ToString().ToLower() } that { questionMain.ToLower()}, { child.ToLower()}");
        var options = new DialogOptions()
            {
                CloseButton = false,
                MaxWidth = MaxWidth.ExtraExtraLarge,
                Position = DialogPosition.Center,
                FullWidth = false,
                CloseOnEscapeKey = true,
                NoHeader = false,
                FullScreen = false,
            };
        DialogService.Show<AskAiDialog>("Ask Medbase AI", parameters, options);
    }

    //Open QuestionRatingDialog
    private async Task OpenQuestionRatingDialog(int questionId)
    {
        //Check if userId is null
        if (string.IsNullOrEmpty(UserId))
        {
            Snackbar.Add("Please login to rate questions", Severity.Error);
            return;
        }

        var parameters = new DialogParameters<QuestionRatingDialog>();
        parameters.Add(x => x.questionId, questionId);
        parameters.Add(x => x.userId, UserId);

        var options = new DialogOptions()
            {
                CloseButton = false,
                MaxWidth = MaxWidth.ExtraLarge,
                Position = DialogPosition.Center,
                FullWidth = false,
                CloseOnEscapeKey = true,
                NoHeader = false,
                FullScreen = false,
            };
        DialogService.Show<QuestionRatingDialog>("Rate Question", parameters, options);
    }
    //Open QuestionFeedbackDialog
    private async Task OpenQuestionFeedbackDialog(int questionId)
    {
        //Check if userId is null
        if (string.IsNullOrEmpty(UserId))
        {
            Snackbar.Add("Please login to give feedback", Severity.Error);
            return;
        }
        var parameters = new DialogParameters<QuestionFeedbackDialog>();
        parameters.Add(x => x.questionId, questionId);
        parameters.Add(x => x.userId, UserId);
        var options = new DialogOptions()
            {
                CloseButton = false,
                MaxWidth = MaxWidth.ExtraLarge,
                Position = DialogPosition.Center,
                FullWidth = false,
                CloseOnEscapeKey = true,
                NoHeader = false,
                FullScreen = false,
            };
        DialogService.Show<QuestionFeedbackDialog>("Feedback", parameters, options);
    }


    private async Task CloseSearch()
    {
        navManager.NavigateTo(navManager.Uri, true);
    }
}
