@page "/questions2/{topicRef:int}"
@page "/questions2/{topicRef:int}/{source}"
@using MedbaseComponents.Controls
@using MedbaseLibrary.Questions
@using MedbaseLibrary.Questions.Models
@inject IDialogService DialogService
@inject IQuestions questionsRepository
@inherits BasePage
@inject NavigationManager navManager


<PageTitle>@title</PageTitle>
<HeadContent>
    <title>@title</title>
    <meta name="title" content="@title" />
    <meta name="description" content="@description" />

    <!-- Open Graph / Facebook -->
    <meta name="og:type" content="website" />
    <meta name="og:url" content="@navManager.BaseUri" />
    <meta name="og:title" content="@title" />
    <meta name="og:description" content="@description" />
    <meta name="og:image" content="@image" />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content="@navManager.BaseUri" />
    <meta name="twitter:title" content="@title" />
    <meta name="twitter:description" content="@description" />
    <meta name="twitter:image" content="@image" />

    <!-- Custom MD Styles -->
</HeadContent>

<div class="container">

    <MudBreadcrumbs Items="_items"></MudBreadcrumbs>

    @if (isLoading.Equals(true))
    {
        <div style="display:@(searchResultsNull == true ? "none" : "block");">
            <LoadingComponent />
        </div>
    }
    else if (questionsPagedWithTopic.QuestionsWithTopic.QuestionSets.Count().Equals(0))
    {
        <EmptyResults SearchWord="@searchTerm" />
    }
    else if (isLoading.Equals(false) && questionsPagedWithTopic.QuestionsWithTopic.QuestionSets.Count().Equals(0))
    {
        <UnderConstruction />
    }
    else
    {
        <div class="floating-toolbar d-flex justify-content-center fixed-bottom mb-5">
            <QuestionsToolbar @ref="questionsToolbar" 
                CloseSearch="@CloseSearch" 
                CurrentPage="@questionsPagedWithTopic.CurrentPage" 
                TotalPages="@questionsPagedWithTopic.Pages" 
                OnPageChange="@GetQuestions" 
                OpenSearch="@OpenSearchDialog" />
        </div>

        <div style="margin-bottom:75px;" class="m-2 position-fixed bottom-0 end-0 justify-content-center @(showToolbar.Equals(true) ? "d-none" : "d-block")">
            <MudFab Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.More"
                    OnClick="OpenToolbar"
                    Label="Show Toolbar"
                    Class="object-left" />
        </div>
        <div class="col-lg-6 col-md-8 mx-auto fw-normal" style="margin-bottom:150px;">
            <Virtualize Items="@questionsPagedWithTopic.QuestionsWithTopic.QuestionSets.ToList()" Context="questionSet" TItem="QuestionSet">
                <ItemContent>
                    <MudCard class="mb-2">
                        <MudCardContent>
                            @if (questionSet.Type.Equals(QuestionType.TrueFalse))
                            {
                                <!--Child1-->
                                var questionMain = questionSet.Questions[0].QuestionText;
                                <div>
                                    <MudText Class="fw-bold">
                                        @($"Number 1. {@questionMain}")
                                    </MudText>
                                    @foreach (var question in questionSet.QuestionOptions)
                                    {
                                        <MudText>
                                            @($"{question.Label.ToLower()}. {question.OptionText}")
                                        </MudText>
                                        <div style="display:@(Answers == 1 && qts == questionSet.Id ? "block" : "none")">
                                            @foreach (var item in question.QuestionOptionRelationships)
                                            {
                                                <QuestionAnswerTemplate QuestionMain="@questionMain"
                                                                        Child="@question.OptionText"
                                                                        Answer="@item.IsCorrect"
                                                                        Explanation="@item.Explanation"
                                                                        AskMedbaseClicked="@(() => AskAIQuestion(questionMain, question.OptionText, item.IsCorrect))" />
                                            }
                                        </div>
                                    }
                                </div>
                            }
                            else if (questionSet.Type.Equals(QuestionType.SingleBest))
                            {
                                var questionMain = questionSet.Questions[0].QuestionText;
                                <MudText Class="fw-bold">
                                    @($"{@questionMain}")
                                </MudText>
                                @foreach (var question in questionSet.QuestionOptions)
                                {
                                    <MudText>
                                        @($"{question.Label.ToLower()}. {question.OptionText}")
                                    </MudText>
                                    <div style="display:@(Answers == 1 && qts == question.Id ? "block" : "none")">
                                        @foreach (var item in question.QuestionOptionRelationships)
                                        {
                                            <QuestionAnswerTemplate QuestionMain="@questionMain"
                                                                    Child="@question.OptionText"
                                                                    Answer="@item.IsCorrect"
                                                                    Explanation="@item.Explanation"
                                                                    AskMedbaseClicked="@(() => AskAIQuestion(questionMain, question.OptionText, item.IsCorrect))" />
                                        }
                                    </div>
                                }
                            }
                        </MudCardContent>
                        <MudCardActions class="justify-content-end">
                            <MudButton Variant="Variant.Text" OnClick="() => ShowAnswers(questionSet.Id)" Color="Color.Primary">Answers</MudButton>
                        </MudCardActions>
                    </MudCard>
                </ItemContent>
            </Virtualize>
        </div>
    }
</div>

@code {
    [Parameter]
    public int topicRef { get; set; } = 0;
    [Parameter]
    public string source { get; set; } = "";
    [Inject]
    public IDatabaseRepository databaseRepository { get; set; }
    public int Answers { get; set; } = 0;
    private int paginationPage = 1;
    public bool searchBarOpen = false;
    public bool searchResultsNull = false;
    private bool isLoading;
    private bool showToolbar = true;
    private string searchTerm = "";
    private QuestionsToolbar questionsToolbar;
    public int qts;

    private string description = "Questions on your chosen topic";
    private string title = "Questions | Medbase";
    private string image = "https://i.postimg.cc/T1DjN4S5/Logo.png";

    private QuestionsPagedWithTopicV2 questionsPagedWithTopic = new();

    protected override async Task OnParametersSetAsync()
    {
        await GetQuestions();
    }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "#", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Courses", href: "/courses", icon: Icons.Material.Filled.Book),
        new BreadcrumbItem("Topics", href: "/courses", icon: Icons.Material.Filled.LibraryBooks),
        new BreadcrumbItem("Questions", href: "/courses", icon: Icons.Material.Filled.QuestionAnswer),
    };

    private void ShowAnswers(int questionToShow)
    {
        qts = questionToShow;
        Answers = 1;
    }

    private string GetIndex(int index)
    {
        return ((char)('1' + index)).ToString();
    }

    private async Task GetQuestions(int page = 1)
    {
        isLoading = true;

        if (!CheckIfIsMaui())
        {
            questionsPagedWithTopic = await questionsRepository.GetAllQuestionsPagedWithTopicV2Async(topicRef, page, 10f);
        }
        else
        {
            if (string.IsNullOrEmpty(source))
            {
                questionsPagedWithTopic = await questionsRepository.GetAllQuestionsPagedWithTopicV2Async(topicRef, page, 10f);
            }
#if !WINDOWS
            else if (source.Equals("offline"))
            {
                //QuestionPagedWithTopic = await databaseRepository.GetPagedQuestionsWithTopic(topicRef, page, 10f);
            }
#endif
        }
        isLoading = false;
    }
    private void OpenSearchBar() => searchBarOpen = !searchBarOpen;
    private void OpenToolbar() => showToolbar = !showToolbar;
    private void OpenDialog(int questionId)
    {
        var parameters = new DialogParameters<CorrectionsDialog>();
        parameters.Add(x => x.questionId, questionId);
        var options = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                Position = DialogPosition.Center,
            };
        DialogService.Show<CorrectionsDialog>("Submit Answer Correction", parameters, options);
    }

    private async Task OpenSearchDialog()
    {
        var parameters = new DialogParameters<SearchQuestionsDialog>();
        var options = new DialogOptions()
            {
                CloseButton = false,
                MaxWidth = MaxWidth.ExtraExtraLarge,
                Position = DialogPosition.Center,
                FullWidth = true,
                CloseOnEscapeKey = true,
                NoHeader = true,
                FullScreen = false,
            };

        try
        {
            var dialog = await DialogService.ShowAsync<SearchQuestionsDialog>("Search Questions", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                searchTerm = result.Data.ToString();
                isLoading = true;
                questionsPagedWithTopic.QuestionsWithTopic = await questionsRepository.GetSearchQuestionsAsync(searchTerm);

                //adjust toolbar appearance
                questionsToolbar.Searched = true;
                questionsToolbar.SearchText = searchTerm;
                int count = questionsPagedWithTopic.QuestionsWithTopic.QuestionSets[0].Questions.Count();
                questionsToolbar.NumberOfSearchResults = count.ToString();

                if (count == 0)
                {
                    searchResultsNull = true;
                }
                isLoading = false;
            }
        }
        catch (Exception)
        {
            // Do nothing
        }
    }

    private async Task AskAIQuestion(string questionMain, string child, bool answer)
    {
        var parameters = new DialogParameters<AskAiDialog>();
        parameters.Add(x => x.questionMain, questionMain);
        parameters.Add(x => x.child, child);
        parameters.Add(x => x.answer, answer);
        var options = new DialogOptions()
            {
                CloseButton = false,
                MaxWidth = MaxWidth.ExtraExtraLarge,
                Position = DialogPosition.Center,
                FullWidth = false,
                CloseOnEscapeKey = true,
                NoHeader = false,
                FullScreen = false,
            };
        DialogService.Show<AskAiDialog>("Ask Medbase AI", parameters, options);
    }

    private async Task CloseSearch()
    {
        navManager.NavigateTo(navManager.Uri, true);
    }
}