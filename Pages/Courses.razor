@using Medbase.Application.Services
@using MedbaseComponents.Shared
@using MedbaseLibrary.CoursesAndTopics
@using Microsoft.AspNetCore.Components.Authorization
@inject CoursesClient coursesClient
@inject NotesClient notesClient
@inject ISnackbar Snackbar
@inject UserService userService
@inject NavigationManager navManager

@if (IsBusy)
{
    <div class="mt-5">
        <LoadingComponent Message="Retrieving courses..." />
    </div>
}
else
{
    <HeaderComponent Title="Your courses" Subtitle="Courses you have selected in your preferences" />

    <MudGrid Class="mt-8">
        <AuthorizeView>
            <Authorized>
                @if (CoursesList.Any())
                {
                    @foreach (Course item in CoursesList)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <MudPaper Class="p-3" @onclick="() => GoToTopics(item.CourseRef)">
                                <MudGrid Spacing="20">
                                    <MudItem xs="3">
                                        <MudImage Src="@item.ImageURL" Style="max-height:100px" />
                                    </MudItem>
                                    <MudItem xs="9">
                                        <MudText Typo="Typo.h6" Align="Align.Start" Class="justify-center">
                                            @item.Title
                                        </MudText>
                                    </MudItem>
                                </MudGrid>
                            </MudPaper>
                        </MudItem>

                    }
                }
                else
                {
                    <EmptyComponent Message="Add you haven't selected the courses you want to see." />
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="/settings">
                        Add Courses
                    </MudButton>
                }
            </Authorized>
            <NotAuthorized>
                <LoginBanner />
            </NotAuthorized>
            <Authorizing>
                <LoadingComponent Message="Logging you in..."/>
            </Authorizing>
        </AuthorizeView>
    </MudGrid>

}

@code {
    private IEnumerable<Course> CoursesList { get; set; } = Enumerable.Empty<Course>();
    private string userId = "";
    bool IsBusy = false;

    protected override async Task OnInitializedAsync()
    {
        userId = await userService.GetUserIdAsync();
        await GetCoursesAsync();
    }

    //Get courses from api
    private async Task GetCoursesAsync()
    {
        IsBusy = true;
        var response = await coursesClient.GetCoursesByUserId(userId);
        if (response.IsSuccess)
        {
            CoursesList = response.Data;
        }
        else
        {
            Snackbar.Add("Something went wrong retrieving courses...", Severity.Error);
        }
        IsBusy = false;
    }

    private void GoToTopics(string courseRef)
    {
        navManager.NavigateTo($"/topics/{courseRef}");
    }

    private void GoToNotes(string courseReference)
    {
        navManager.NavigateTo($"/notes/course/{courseReference}");
    }

    private void GoToEssays(string courseRef)
    {
        navManager.NavigateTo($"/essays/{courseRef}");
    }
}
