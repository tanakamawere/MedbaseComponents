@page "/signin"

@layout AuthLayout
@inject IAuthService authService
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject ILocalStorage authStateHandler
@using MedbaseLibrary.Helpers
@using Microsoft.AspNetCore.Authorization
@inject IAuthMemory authMemory
@using MedbaseComponents.Controls

<PageTitle>Sign In | Medbase</PageTitle>

<div class="w-100 m-auto" style="max-width:350px;padding:1rem;">
    <MudImage Src="img/medbase_transparent.png" Style="max-height:80px" />
    <MudStack>
        <div class="@(isBusy ? "d-block" : "d-none")">
            <SkeletonLoadingComponent />
        </div>
        <EditForm Model="User" OnValidSubmit="LoginUser" class="@(isBusy ? "d-none" : "d-block")">
            <DataAnnotationsValidator />
            <h4>Please sign in</h4>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />

            <div>
                <!-- Email Address -->
                <MudTextField @bind-Value="User.Email"
                              Label="Email Address"
                              Variant="Variant.Outlined" />
                <ValidationMessage For="() => User.Email" class="text-danger" />
            </div>

            <!-- Password -->

            <div>
                <MudTextField @bind-Value="User.Password"
                              Label="Password"
                              Variant="Variant.Outlined"
                              InputType="@PasswordInput"
                              Adornment="Adornment.End"
                              AdornmentIcon="@PasswordInputIcon"
                              OnAdornmentClick="@TogglePasswordVisibility"
                              AdornmentAriaLabel="Show Password" />
                <ValidationMessage For="() => User.Password" class="text-danger" />
            </div>

            <SubmitButton IsBusy="isBusy" Title="Sign In"/>
        </EditForm>
        <p>
            <a href="Account/ForgotPassword">Forgot your password?</a>
        </p>
        <p>
            <a href="/signup">Sign up as a new user</a>
        </p>
    </MudStack>
</div> 

@code {
    private string? errorMessage;
    private bool showPassword;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool isBusy = false;

    private AuthenticationRequest? User { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
    }

    public async Task LoginUser()
    {
        isBusy = true;
        try
        {
            var result = await authService.SignInAsync(User);
            if (result.IsSuccess)
            {
                AuthenticationResponse response = result.Data as AuthenticationResponse;
                //await authStateHandler.SetObjectAsync("auth", response.Token);
                authMemory.StoreToken(Helpers.AuthMemory, response.Token);
                Console.WriteLine(response.Token);
                NavigationManager.NavigateTo("/home", true);
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isBusy = false;
        }
    }

    void TogglePasswordVisibility()
    {
        if (showPassword)
        {
            showPassword = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            showPassword = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}
