@page "/signup"

@layout AuthLayout
@inject IAuthService authService
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@using MedbaseComponents.Controls
@inject ISnackbar Snackbar

<PageTitle>@title</PageTitle>
<HeadContent>
    <title>@title</title>
    <meta name="title" content="@title" />
    <meta name="description" content="@description" />

    <!-- Open Graph / Facebook -->
    <meta name="og:type" content="website" />
    <meta name="og:url" content="@navManager.BaseUri" />
    <meta name="og:title" content="@title" />
    <meta name="og:description" content="@description" />
    <meta name="og:image" content="@image" />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content="@navManager.BaseUri" />
    <meta name="twitter:title" content="@title" />
    <meta name="twitter:description" content="@description" />
    <meta name="twitter:image" content="@image" />
</HeadContent>

<div class="w-100 m-auto" style="max-width:350px;padding:1rem;">
    <MudImage Src="img/medbase_transparent.png" Style="max-height:100px" />
    <MudStack Spacing="5">

        <div class="@(isBusy ? "d-block" : "d-none")">
            <SkeletonLoadingComponent />
        </div>
        <div class="@(isBusy ? "d-none" : "d-block")">
            <EditForm Model="Input" OnValidSubmit="CreateUserAsync" FormName="register">
                <DataAnnotationsValidator />
                <h2>Create a new account.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />

                <div>
                    <MudTextField @bind-Value="Input.Email"
                                  Label="Email Address"
                                  Error="@signUpFailed"
                                  ErrorText="@errorMessage"
                                  Variant="Variant.Outlined" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div>
                    <MudTextField type="password"
                                  @bind-Value="Input.Password"
                                  Error="@signUpFailed"
                                  ErrorText="@errorMessage"
                                  Label="Password"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div>
                    <MudTextField type="password" @bind-Value="Input.ConfirmPassword"
                                  Label="Confirm Password"
                                  Variant="Variant.Outlined"
                                  Error="@signUpFailed"
                                  ErrorText="@errorMessage"
                                  InputType="InputType.Password" />
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
                <SubmitButton IsBusy="isBusy" Title="Sign Up" />
            </EditForm>
        </div>
        <MudStack>
            <p>
                <a href="/signin">Already have an account? Sign in</a>
            </p>
        </MudStack>
    </MudStack>
</div>
@code {
    private string? userNamePreview;
    private string? errorMessage;
    private bool signUpFailed = false;
    private bool showPassword;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    private bool isBusy = false;
    private Snackbar snackbar;

    //SEO
    private string description = "Create an account today to use Medbase AI and more";
    private string title = "Sign Up | Medbase";
    private string image = "https://i.postimg.cc/T1DjN4S5/Logo.png";

    private AuthenticationRequest? User { get; set; } = new();

    private async Task CreateUserAsync()
    {
        isBusy = true;
        try
        {
            User.Email = Input.Email;
            User.Password = Input.Password;

            //Brings back user id that has been created to navigate to next page
            var result = await authService.SignUpAsync(User);

            if (result.IsSuccess)
            {
                Console.WriteLine(result.Data);
                //Sign in success. Go to details page and update accordingly
                NavigationManager.NavigateTo($"/signupdetails/{result.Data.ToString()}");
            }
            else
            {
                errorMessage = result.Message;
                signUpFailed = true;
                snackbar = Snackbar.Add(result.Message, Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            isBusy = false;
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
