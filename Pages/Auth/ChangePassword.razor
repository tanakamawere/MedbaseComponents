@page "/changepassword"
@layout ManageLayout
@using System.ComponentModel.DataAnnotations
@using MedbaseComponents.Controls
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject IAuthService authService
@inject AuthenticationStateProvider authState
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar

<PageTitle>
    Change Password | Medbase
</PageTitle>

<div class="container my-auto mx-auto">

    <h1>Change Password</h1>

    @if (isLoading)
    {
        <LoadingComponent />
    }
    else
    {
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
                <label for="old-password" class="form-label">Old password</label>
                <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                <label for="new-password" class="form-label">New password</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
                <label for="confirm-password" class="form-label">Confirm password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
        </EditForm>
    }
</div>




@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();
    bool isLoading = false;
    private Snackbar snackbar;

    private AuthenticationState authenticationState;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await authState.GetAuthenticationStateAsync();
    }

    private async Task OnValidSubmitAsync()
    {
        isLoading = true;
        AuthenticationChangePassword authenticationChangePassword = new()
        {
            Password = Input.OldPassword,
            NewPassword = Input.NewPassword,
            Email = authenticationState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email).Value
        };

        var response = await authService.ChangePasswordAsync(authenticationChangePassword);

        if (response.IsSuccess)
        {
            ShowSnackbar("Password change successful", Severity.Success);
            navigationManager.NavigateTo("/profile");
        }
        else
        {
            isLoading = false;
            Console.WriteLine(authenticationChangePassword.Email + response.Message);
            ShowSnackbar($"Sorry, password wasn't changed. {response.Message}", Severity.Error);
        }
    }

    void ShowSnackbar(string message, Severity severity)
    {
        snackbar = Snackbar.Add(message, severity);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
