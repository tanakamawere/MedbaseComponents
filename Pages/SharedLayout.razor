@using MedbaseLibrary.Helpers
@using MedbaseLibrary.MsalClient
@using Microsoft.Identity.Client
@using Microsoft.Extensions.Configuration
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider authState
@inject NavigationManager navManager
@inject IAuthMemory _authMemory

<PageTitle>Medbase | Medical School MCQs</PageTitle>

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="someTheme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudLink Typo="Typo.h6" Class="ml-3" Href="/home" Color="Color.Inherit">
            Medbase
        </MudLink>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <MudNavMenu Rounded="true" Margin="Margin.Dense" Color="Color.Primary" Class="pa-2">
            <AuthorizeView>
                <Authorized>
                    <MudMenu>
                        <ActivatorContent>
                            <div class="d-flex justify-content-center align-items-center p-2">
                                <MudAvatar>TM</MudAvatar>
                                <MudText Class="my-auto ms-3">@authenticationState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName).Value @authenticationState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Surname).Value</MudText>
                            </div>
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem Href="/profile" Icon="@Icons.Material.Filled.Person">
                                Profile
                            </MudMenuItem>
                            <MudMenuItem OnClick="ThemeToggle" Icon="@(_isDarkMode == true ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)">
                                @(_isDarkMode == true ? "Dark Mode On" : "Dark Mode Off")
                            </MudMenuItem>
                            <MudMenuItem Icon="@Icons.Material.Filled.Logout" OnClick="SignOut">
                                Sign Out
                            </MudMenuItem>
                        </ChildContent>
                    </MudMenu>
                </Authorized>
                <NotAuthorized>
                    <MudMenu>
                        <ActivatorContent>
                            <div class="d-flex justify-content-center align-items-center p-2">
                                <MudAvatar>GU</MudAvatar>
                                <MudText Class="my-auto ms-3">Guest User</MudText>
                            </div>
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem OnClick="ThemeToggle" Icon="@(_isDarkMode == true ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)">
                                @(_isDarkMode == true ? "Dark Mode On" : "Dark Mode Off")
                            </MudMenuItem>
                            <MudMenuItem Href="/signup" Icon="@Icons.Material.Filled.Create">Sign Up</MudMenuItem>
                            <MudMenuItem Href="/signin" Icon="@Icons.Material.Filled.Login">Sign In</MudMenuItem>
                        </ChildContent>
                    </MudMenu>
                </NotAuthorized>
            </AuthorizeView>

            <MudDivider />

            <MudNavLink Href="/home" Icon="@Icons.Material.Filled.Dashboard">Home</MudNavLink>
            @* <MudNavLink Href="/pricing" Icon="@Icons.Material.Filled.PriceChange">Pricing</MudNavLink> *@
            <MudNavLink Href="/courses" Icon="@Icons.Material.Filled.Book">Courses</MudNavLink>
            <MudNavLink Href="/notes" Icon="@Icons.Material.Filled.Note">Notes</MudNavLink>
            <MudNavLink Href="/chat" Icon="@Icons.Material.Filled.Computer">Medbase AI</MudNavLink> 
            <MudNavLink Href="/articles" Icon="@Icons.Material.Filled.Newspaper">Articles</MudNavLink>
            @* <MudNavLink Href="/Gamma" Icon="@Icons.Material.Filled.Download">Gamma</MudNavLink> *@
            <MudNavLink Href="/about" Icon="@Icons.Material.Filled.QuestionAnswer">About & Contact</MudNavLink>
            <AuthorizeView Roles="administrator, manager, contributor">
                <MudNavLink Href="/admin" Icon="@Icons.Material.Filled.AdminPanelSettings">Medbase Admin</MudNavLink>
            </AuthorizeView>
            <AuthorizeView>
                <NotAuthorized>
                    <MudNavLink Href="/signin" Icon="@Icons.Material.Filled.Login">Sign In</MudNavLink>
                </NotAuthorized>
            </AuthorizeView>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
    @* <footer class="py-3 my-4 bottom-0">
        <ul class="nav justify-content-center border-bottom pb-3 mb-3">
            <li class="nav-item">
                <MudNavLink Href="/home">Home</MudNavLink>
            </li>
            <li class="nav-item">
                <MudNavLink Href="/notes">Notes</MudNavLink>
            </li>
            <li class="nav-item">
                <MudNavLink Href="/courses">Courses</MudNavLink>
            </li>
            <li class="nav-item">
                <MudNavLink Href="/articles">Articles</MudNavLink>
            </li>
            <li class="nav-item">
                <MudNavLink Href="/about">About & Contact</MudNavLink>
            </li>
        </ul>
        <p class="text-center text-body-secondary">© @DateTime.Now.Year Medbase, Inc</p>
    </footer> *@
</MudLayout>
@code {

    private AuthenticationState authenticationState;
    private string FirstLastName = "";

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await authState.GetAuthenticationStateAsync();
    }

    //Sign out method
    private async Task SignOut()
    {
        string userId = authenticationState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName).Value;
        _authMemory.RemoveToken(Helpers.AuthMemory);
        navManager.NavigateTo("/", true);
    }

    bool _drawerOpen = true;
    private MudThemeProvider _mudThemeProvider;
    private bool _isDarkMode;
    MudTheme someTheme = new()
    {
        Palette = new PaletteLight()
        {
                Primary = Colors.Blue.Darken2,
            AppbarBackground = Colors.Blue.Accent1,
        },
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Blue.Lighten1
        },
    };

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void ThemeToggle() =>
        _isDarkMode = !_isDarkMode;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
    }
}