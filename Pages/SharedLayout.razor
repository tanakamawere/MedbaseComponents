@using MedbaseComponents.Controls
@using MedbaseLibrary.Helpers
@using MedbaseLibrary.MsalClient
@using Microsoft.Identity.Client
@using Microsoft.Extensions.Configuration
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject IPCAWrapper _pcaWrapper;
@inject IConfiguration _configuration
@inject NavigationManager navManager
@inject ISnackbar Snackbar
@inject IPlatformInfoService _platformInfoService
@inject AuthenticationStateProvider authStateProvider

<PageTitle>Medbase | Medical School MCQs</PageTitle>

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="someTheme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudLink Typo="Typo.h6" Class="ml-3" Href="/home" Color="Color.Inherit">
            Medbase
        </MudLink>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <MudNavMenu Rounded="true" Margin="Margin.Dense" Color="Color.Primary" Class="pa-2">
            <MudNavLink Href="/home" Icon="@Icons.Material.Filled.Dashboard">Home</MudNavLink>
            @* <MudNavLink Href="/pricing" Icon="@Icons.Material.Filled.PriceChange">Pricing</MudNavLink> *@
            
            <MudNavLink Href="/courses" Class="@(IsMaui == true ? "d-block" : "d-none")" Icon="@Icons.Material.Filled.Book">Courses</MudNavLink>
            <MudNavLink Href="/downloads" Class="@(IsMaui == true ? "d-none" : "d-block")" Icon="@Icons.Material.Filled.Download">Downloads</MudNavLink>
            <MudNavLink Href="/notes" Icon="@Icons.Material.Filled.Note">Notes</MudNavLink>
            <MudNavLink Href="/chat" Icon="@Icons.Material.Filled.Computer">Medbase AI</MudNavLink> 
            <MudNavLink Href="/articles" Icon="@Icons.Material.Filled.Newspaper">Articles</MudNavLink>
            @* <MudNavLink Href="/Gamma" Icon="@Icons.Material.Filled.Download">Gamma</MudNavLink> *@
            <MudNavLink Href="/about" Icon="@Icons.Material.Filled.QuestionAnswer">About & Contact</MudNavLink>
            <MudNavLink OnClick="ThemeToggle" Icon="@(_isDarkMode == true ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)">
                @(_isDarkMode == true ? "Dark Mode On" : "Dark Mode Off")
            </MudNavLink>

            <MudDivider />

            <MudPaper>
                @if (isBusy)
                {
                    <MedbaseComponents.Controls.LoadingComponent Message="Logging in..." />
                }
                else
                {
                    ﻿<AuthorizeView>
                        <Authorized>
                            <MudNavLink OnClick="() => OnLogoutClicked()">Log out</MudNavLink>
                            <MudText>Logged in as: @UserName</MudText>
                        </Authorized>
                        <NotAuthorized>
                            <MudNavLink OnClick="() => OnLoginClicked()">Log in</MudNavLink>
                        </NotAuthorized>
                    </AuthorizeView>
                }
            </MudPaper>

        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>
@code {
    private bool isBusy = false;
    private bool isLoggedIn;
    private Snackbar snackbar;
    private string UserName = "";
    private bool IsMaui;
    private AuthenticationState authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await authStateProvider.GetAuthenticationStateAsync();
        CheckPlatform();
    }

    private void CheckPlatform()
    {
#if WINDOWS || ANDROID || IOS
    IsMaui = true;
#else
        IsMaui = true;
#endif
    }

    bool _drawerOpen = true;
    private MudThemeProvider _mudThemeProvider;
    private bool _isDarkMode;
    MudTheme someTheme = new()
    {
        Palette = new PaletteLight()
        {
                Primary = Colors.Blue.Darken2,
            AppbarBackground = Colors.Blue.Accent1,
        },
        PaletteDark = new PaletteDark()
        {
            Primary = Colors.Blue.Lighten1
        },
    };

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void ThemeToggle() =>
        _isDarkMode = !_isDarkMode;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
    }

    private async void OnLoginClicked()
    {
        isBusy = true;
        try
        {
            // Attempt silent login, and obtain access token.
            var result = await _pcaWrapper.AcquireTokenSilentAsync(_pcaWrapper.Scopes).ConfigureAwait(false);

            // Set access token.
            GlobalValues.AccessToken = result?.AccessToken;
            if (GlobalValues.AccessToken != null)
            {
                isLoggedIn = true;
                snackbar = Snackbar.Add("You are now signed in!", Severity.Success);
            }
        } 
        // A MsalUiRequiredException will be thrown, if this is the first attempt to login, or after logging out.
        catch (MsalUiRequiredException)
        {
            try
            {
                // Perform interactive login, and obtain access token.
                var result = await _pcaWrapper.AcquireTokenInteractiveAsync(_pcaWrapper?.Scopes).ConfigureAwait(false);

                // Set access token.
                GlobalValues.AccessToken = result?.AccessToken;
                if (GlobalValues.AccessToken != null)
                {
                    isLoggedIn = true;
                    snackbar = Snackbar.Add("You are now signed in!", Severity.Success);
                }
            }
            catch (Exception ex)
            {
                // Ignore.
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            snackbar = Snackbar.Add("An error occurred while signing in. Please try again.", Severity.Error);
        }
        finally
        {
            isBusy = false;
        }
    }

    private async void OnLogoutClicked()
    {
        await _pcaWrapper.SignOutAsync().ConfigureAwait(false);
        GlobalValues.AccessToken = null;
        isLoggedIn = false;
        snackbar = Snackbar.Add("You are now signed out!", Severity.Success);
    }
}