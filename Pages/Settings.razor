@page "/settings"
@using Medbase.Application.Services
@using MedbaseComponents.Shared
@using MedbaseLibrary.CoursesAndTopics
@using MedbaseLibrary.UserPreferences
@inject CoursesClient coursesClient;
@inject UserCoursePreferencesClient userCoursePreferencesClient;
@inject UserService userService;
@inject NavigationManager navManager;
@inject ISnackbar Snackbar;
@attribute [Authorize]


<MudContainer>
    <MudTabs>
        <MudTabPanel Text="General">
            <MudSwitch Label="Dark Mode" T="bool" @bind-Checked="DarkMode" />
            <MudSwitch Label="Enable Notifications" T="bool" @bind-Checked="EnableNotifications" />
        </MudTabPanel>

        <MudTabPanel Text="Account">
            <MudText Typo="Typo.h6">Manage Account</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ChangePassword">Change Password</MudButton>
        </MudTabPanel>

        <MudTabPanel Text="Course Preferences">
            @if (IsBusy)
            {
                <LoadingComponent Message="Getting preferences..." />
            }
            else
            {
                <MudText Typo="Typo.h6">Courses you have selected already</MudText>

                <div class="d-flex">
                    @foreach (var item in ExistingCourses)
                    {
                        <MudChip T="string" OnClick="() => OnExistingChipClicked(item.Id)">@item.Title</MudChip>
                    }
                </div>

                <MudText Typo="Typo.h6">Available courses</MudText>

                <MudChipSet T="Course">
                    @foreach (var item in AvailableCourses)
                    {
                        <MudChip T="string" OnClick="() => OnAvailableChipClicked(item.Id)">@item.Title</MudChip>
                    }
                </MudChipSet>

                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SavePreferences">Save Preferences</MudButton>
            }
        </MudTabPanel>
    </MudTabs>
</MudContainer>

@code {
    private List<Course> AvailableCourses = [];
    private List<Course> ExistingCourses = [];
    private IEnumerable<UserCoursePreference> ExistingCoursePreferences = Enumerable.Empty<UserCoursePreference>();
    private bool DarkMode = false;
    private bool EnableNotifications = true;
    private string userId = "";
    bool IsBusy = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userId = await userService.GetUserIdAsync();
            await GetPreferencesAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private void OnExistingChipClicked(int courseId)
    {
        //Remove the course from the existing pref list and add to the available courses
        var course = ExistingCourses.FirstOrDefault(c => c.Id == courseId);
        ExistingCourses.Remove(course);
        AvailableCourses.Add(course);
    }

    private void OnAvailableChipClicked(int courseId)
    {
        //Don't allow more than 5 courses to be selected
        if (ExistingCourses.Count >= 5)
        {
            Snackbar.Add("You can only select up to 5 courses", Severity.Info);
            return;
        }

        var course = AvailableCourses.FirstOrDefault(c => c.Id == courseId);
        AvailableCourses.Remove(course);
        ExistingCourses.Add(course);
    }

    private async Task GetPreferencesAsync()
    {
        IsBusy = true;

        ExistingCourses.Clear();
        AvailableCourses.Clear();

        // Get all available courses
        var courses = await coursesClient.GetCoursesAsync();
        var userPreferences = await userCoursePreferencesClient.GetUserCoursePrefsAsync(userId);

        AvailableCourses = courses.Data.ToList();

        foreach (var item in userPreferences.Data)
        {
            ExistingCourses.Add(item.Course);
            var itemToRemove = AvailableCourses.Where(x => x.Id == item.Course.Id).FirstOrDefault();
            AvailableCourses.Remove(itemToRemove);
        }
        IsBusy = false;
    }

    private void ChangePassword()
    {
        // Logic to change password
    }

    private async Task SavePreferences()
    {
        IsBusy = true;

        // Get the selected course IDs from existing courses list
        var selectedCourseIds = ExistingCourses.Select(c => c.Id).ToList();

        UserCoursePrefDto userCoursePrefDto = new()
            {
                UserId = userId,
                CourseIds = selectedCourseIds
            };

        if (ExistingCoursePreferences != null)
        {
            var response = await userCoursePreferencesClient.UpdateUserCoursePrefAsync(userCoursePrefDto);
            await DisplayMessage(response.IsSuccess, response.ErrorMessage);
        }
        else
        {
            var response = await userCoursePreferencesClient.AddUserCoursePrefsAsync(userCoursePrefDto);
            await DisplayMessage(response.IsSuccess, response.ErrorMessage);
        }

        IsBusy = false;
    }

    private async Task DisplayMessage(bool success, string errorMessage = "")
    {
        if (success)
        {
            Snackbar.Add("Preferences saved successfully", Severity.Success);
            await GetPreferencesAsync();
        }
        else
        {
            Snackbar.Add($"Error saving preferences: {errorMessage}", Severity.Error);
        }
    }
}
